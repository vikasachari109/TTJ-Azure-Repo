1) Azure Blob Storage

What is it?
- Azure Blob Storage is a cloud-based object storage solution provided by Microsoft Azure. It is designed to store and manage large amounts of unstructured data, such as documents, images, videos, and other types of binary and text data. Blobs are organized into containers, and each blob is assigned a unique URL for access.

When to use it?
- Use Azure Blob Storage when you need to store and retrieve large amounts of unstructured data. It is suitable for scenarios like serving images or videos to a website, storing backups, and handling data for analytics and big data processing.

Example from DevOps Engineer point of view?
- A DevOps engineer may use Azure Blob Storage to store artifacts and binaries produced during the build process, ensuring a centralized and scalable storage solution. Azure Storage Explorer or Azure CLI can be used to automate the uploading and retrieval of artifacts during deployment pipelines.

Equivalent service in AWS:
- The equivalent service in AWS is Amazon Simple Storage Service (S3). S3 is also an object storage service designed for scalable and secure storage of objects, such as files and data.

2) Azure File Storage

What is it?
- Azure File Storage is a fully managed file share service in the cloud. It provides the Server Message Block (SMB) protocol for sharing files across applications and VMs in the Azure cloud. Azure File Storage is useful for applications that require shared file access, such as configuration files or data files.

When to use it?
- Use Azure File Storage when you need a shared file system that can be accessed from multiple VMs or applications. It is suitable for scenarios like storing configuration files, sharing data between applications, and serving as a common storage location for applications in a cloud environment.

Example from DevOps Engineer point of view?
- A DevOps engineer may leverage Azure File Storage to store configuration files that are shared among multiple application instances. In a deployment pipeline, scripts or configuration files stored in Azure File Storage can be mounted to VMs or containers during the deployment process.

Equivalent service in AWS:
- The equivalent service in AWS is Amazon Elastic File System (EFS). EFS provides scalable file storage for use with Amazon EC2 instances, supporting the Network File System (NFS) protocol.

3) Azure Tables

What is it?
- Azure Tables is a NoSQL data store service provided by Azure. It stores large amounts of semi-structured data and allows for fast and efficient querying using a key-based access model. Data is organized into tables, and each table can store billions of entities.

When to use it?
- Use Azure Tables when you need a highly scalable NoSQL data store for semi-structured data with simple key-based access. It is suitable for scenarios like storing configuration data, user profiles, and other data where a key-value or key-attribute data model is appropriate.

Example from DevOps Engineer point of view?
- A DevOps engineer may use Azure Tables to store configuration settings for applications or services. During the deployment process, scripts can retrieve configuration data from Azure Tables to customize the behavior of deployed applications.

Equivalent service in AWS:
- While AWS does not have a direct equivalent service for Azure Tables, Amazon DynamoDB is a similar NoSQL database service that provides key-value and document storage. DynamoDB can be used for similar use cases.

4) Azure Queue Storage

What is it?
- Azure Queue Storage is a message queue service that allows decoupling of components in a distributed application. It provides a reliable way to store and retrieve messages between application components, ensuring asynchronous communication.

When to use it?
- Use Azure Queue Storage when you need to enable communication and coordination between different parts of a distributed application. It is suitable for scenarios like handling background jobs, managing tasks asynchronously, and facilitating communication between loosely coupled components.

Example from DevOps Engineer point of view?
- A DevOps engineer may use Azure Queue Storage to implement a message queue for processing background tasks or managing communication between microservices. During deployment, scripts can enqueue messages to trigger specific actions or coordinate tasks between different components.

Equivalent service in AWS:
- The equivalent service in AWS is Amazon Simple Queue Service (SQS). SQS provides a fully managed message queue service for decoupling components in a distributed system.

--------------------------

-> SP $ MI(Resource to Resource connection)

- create a VM with usr and password
- VM (ubuntu)-> secuity -> identity -> sys assigned -> status on -> save -> object ID created.
- SA -> IAM -> Role assignment -> job function = storage owner -> assing to object ID or MI name select the created -> create and add
- verify in VM identity assignment
- login user@publiciP
- enter password
- sudo apt update
- sudo apt install jq

- Fetch access token
// access_token=$(curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fstorage.azure.com%2F' -H Metadata:true | jq -r '.access_token')

echo access_token == <cewecwec>

- Access the blob from Virtual Machine
storage_account_name="" container_name="" blob_name="index.html"
// curl "https://$storage_account_name.blob.core.windows.net/$container_name/$blob_name" -H "x-ms-version: 2017-11-09" -H "Authorization: Bearer $access_token"

// print the index.html page content in the terminal

-------------------------------

Azure Info

Azure
* Subscription (Subscription ID)
    * A contract with Microsoft to use Azure services.
    * Contains multiple resource groups.
    * Used for billing and access control.
* Resource Group
    * A container for Azure resources.
    * Used to manage, deploy, and monitor related resources.
    * Contains multiple resources.
* Resource (Resource ID)
    * An individual Azure service instance (e.g., VM, storage account, database).
    * Has a unique identifier within a resource group.
Azure Active Directory (Azure AD) - microsoft EntraID
* Tenant (Tenant ID)
    * Represents an organization in Azure AD.
    * Contains users, groups, and applications.
* Object ID
    * A unique identifier for any object in Azure AD (users, groups, applications).
* Client ID
    * A unique identifier for an application registered in Azure AD.
    * Used for authentication and authorization.
* Subscription Key
    * Used for accessing specific Azure services (like Cognitive Services, Maps).
    * Not directly tied to Azure AD but often used in conjunction with it.


Step-by-Step Explanation
1. Tenant: Represents an organization or entity in Azure AD.
2. Subscription: A contract within a tenant for using Azure services.
3. Resource Group: A container for related Azure resources within a subscription.
4. Resource: An individual Azure service instance within a resource group.
5. Object ID: A unique identifier for any entity in Azure AD.
6. Client ID: A specific identifier for an application registered in Azure AD.
7. Subscription Key: A key used to access specific Azure services.


Note:
* A tenant can have multiple subscriptions.
* A subscription can have multiple resource groups.
* A resource group can contain multiple resources.
* An application in Azure AD has a Client ID and Object ID.
* Subscription keys are typically used for API-based services and are not directly tied to Azure AD but often used in conjunction with it.
By understanding these components, you can better organize and manage your Azure resources and applications.

1. Authentication and Authorization:
* This would involve a deeper look into Tenant ID, Client ID, Object ID, and how they relate to authentication and authorization processes in Azure AD.
2. Resource Management:
* We could delve into Subscription, Resource Groups, and Resource IDs, understanding how to organize and manage your Azure resources effectively.
3. Specific Azure Service:
* If you're working with a particular service like Azure Cognitive Services, Azure Maps, or Azure Storage, we can explore how Subscription Keys fit into the picture and how to use them.

